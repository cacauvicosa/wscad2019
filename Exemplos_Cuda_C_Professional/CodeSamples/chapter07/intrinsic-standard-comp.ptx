//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_20
.address_size 64

	// .globl	_Z15standard_kernelfPfi

.visible .entry _Z15standard_kernelfPfi(
	.param .f32 _Z15standard_kernelfPfi_param_0,
	.param .u64 _Z15standard_kernelfPfi_param_1,
	.param .u32 _Z15standard_kernelfPfi_param_2
)
{
	.reg .pred 	%p<30>;
	.reg .f32 	%f<113>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<3>;


	ld.param.f32 	%f21, [_Z15standard_kernelfPfi_param_0];
	ld.param.u64 	%rd1, [_Z15standard_kernelfPfi_param_1];
	ld.param.u32 	%r3, [_Z15standard_kernelfPfi_param_2];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r5, %r4;
	mov.u32 	%r7, %tid.x;
	neg.s32 	%r8, %r7;
	setp.ne.s32	%p2, %r6, %r8;
	@%p2 bra 	BB0_12;

	setp.lt.s32	%p3, %r3, 1;
	@%p3 bra 	BB0_11;

	mov.f32 	%f23, 0f3F800000;
	cvt.rzi.f32.f32	%f24, %f23;
	add.f32 	%f25, %f24, %f24;
	mov.f32 	%f26, 0f40000000;
	sub.f32 	%f27, %f26, %f25;
	abs.f32 	%f28, %f27;
	setp.eq.f32	%p1, %f28, 0f3F800000;
	abs.f32 	%f1, %f21;
	setp.lt.f32	%p4, %f1, 0f00800000;
	mul.f32 	%f29, %f1, 0f4B800000;
	selp.f32	%f30, 0fC3170000, 0fC2FE0000, %p4;
	selp.f32	%f31, %f29, %f1, %p4;
	mov.b32 	 %r10, %f31;
	and.b32  	%r11, %r10, 8388607;
	or.b32  	%r12, %r11, 1065353216;
	mov.b32 	 %f32, %r12;
	shr.u32 	%r13, %r10, 23;
	cvt.rn.f32.u32	%f33, %r13;
	add.f32 	%f34, %f30, %f33;
	setp.gt.f32	%p5, %f32, 0f3FB504F3;
	mul.f32 	%f35, %f32, 0f3F000000;
	add.f32 	%f36, %f34, 0f3F800000;
	selp.f32	%f37, %f35, %f32, %p5;
	selp.f32	%f38, %f36, %f34, %p5;
	add.f32 	%f2, %f37, 0fBF800000;
	add.f32 	%f3, %f37, 0f3F800000;
	add.f32 	%f4, %f2, %f2;
	mov.f32 	%f39, 0f3F317200;
	mul.rn.f32 	%f5, %f38, %f39;
	mov.f32 	%f40, 0f35BFBE8E;
	mul.rn.f32 	%f6, %f38, %f40;
	abs.f32 	%f7, %f26;
	mov.u32 	%r19, 0;
	// inline asm
	rcp.approx.ftz.f32 %f41,%f3;
	// inline asm
	mul.f32 	%f45, %f41, %f4;

BB0_3:
	mul.f32 	%f46, %f45, %f45;
	mov.f32 	%f47, 0f3C4CAF63;
	mov.f32 	%f48, 0f3B18F0FE;
	fma.rn.f32 	%f49, %f48, %f46, %f47;
	mov.f32 	%f50, 0f3DAAAABD;
	fma.rn.f32 	%f51, %f49, %f46, %f50;
	mul.rn.f32 	%f52, %f51, %f46;
	mul.rn.f32 	%f53, %f52, %f45;
	sub.f32 	%f54, %f2, %f45;
	neg.f32 	%f55, %f45;
	add.f32 	%f56, %f54, %f54;
	fma.rn.f32 	%f57, %f55, %f2, %f56;
	mul.rn.f32 	%f58, %f41, %f57;
	add.f32 	%f59, %f53, %f45;
	sub.f32 	%f60, %f45, %f59;
	add.f32 	%f61, %f53, %f60;
	add.f32 	%f62, %f58, %f61;
	add.f32 	%f63, %f59, %f62;
	sub.f32 	%f64, %f59, %f63;
	add.f32 	%f65, %f62, %f64;
	add.f32 	%f66, %f5, %f63;
	sub.f32 	%f67, %f5, %f66;
	add.f32 	%f68, %f63, %f67;
	add.f32 	%f69, %f65, %f68;
	add.f32 	%f70, %f6, %f69;
	add.f32 	%f71, %f66, %f70;
	sub.f32 	%f72, %f66, %f71;
	add.f32 	%f73, %f70, %f72;
	setp.gt.f32	%p6, %f7, 0f77F684DF;
	selp.f32	%f74, 0f39800000, 0f40000000, %p6;
	mul.rn.f32 	%f75, %f74, %f71;
	neg.f32 	%f76, %f75;
	fma.rn.f32 	%f77, %f74, %f71, %f76;
	fma.rn.f32 	%f78, %f74, %f73, %f77;
	mov.f32 	%f79, 0f00000000;
	fma.rn.f32 	%f80, %f79, %f71, %f78;
	add.rn.f32 	%f81, %f75, %f80;
	neg.f32 	%f82, %f81;
	add.rn.f32 	%f83, %f75, %f82;
	add.rn.f32 	%f84, %f83, %f80;
	mov.b32 	 %r14, %f81;
	setp.eq.s32	%p7, %r14, 1118925336;
	add.s32 	%r15, %r14, -1;
	mov.b32 	 %f85, %r15;
	add.f32 	%f86, %f84, 0f37000000;
	selp.f32	%f87, %f85, %f81, %p7;
	selp.f32	%f8, %f86, %f84, %p7;
	mul.f32 	%f88, %f87, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f89, %f88;
	mov.f32 	%f90, 0fBF317200;
	fma.rn.f32 	%f91, %f89, %f90, %f87;
	mov.f32 	%f92, 0fB5BFBE8E;
	fma.rn.f32 	%f93, %f89, %f92, %f91;
	mul.f32 	%f44, %f93, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f43,%f44;
	// inline asm
	add.f32 	%f94, %f89, 0f00000000;
	ex2.approx.f32 	%f95, %f94;
	mul.f32 	%f96, %f43, %f95;
	setp.lt.f32	%p8, %f87, 0fC2D20000;
	selp.f32	%f97, 0f00000000, %f96, %p8;
	setp.gt.f32	%p9, %f87, 0f42D20000;
	selp.f32	%f109, 0f7F800000, %f97, %p9;
	setp.eq.f32	%p10, %f109, 0f7F800000;
	@%p10 bra 	BB0_5;

	fma.rn.f32 	%f109, %f109, %f8, %f109;

BB0_5:
	mov.b32 	 %r16, %f109;
	xor.b32  	%r17, %r16, -2147483648;
	mov.b32 	 %f98, %r17;
	setp.lt.f32	%p11, %f21, 0f00000000;
	and.pred  	%p12, %p11, %p1;
	selp.f32	%f12, %f98, %f109, %p12;
	setp.eq.f32	%p13, %f21, 0f00000000;
	setp.geu.f32	%p14, %f21, 0f00000000;
	add.f32 	%f99, %f21, %f21;
	selp.f32	%f100, %f99, 0f00000000, %p1;
	selp.f32	%f110, %f100, %f12, %p13;
	@%p14 bra 	BB0_7;

	cvt.rzi.f32.f32	%f102, %f26;
	setp.neu.f32	%p15, %f102, 0f40000000;
	selp.f32	%f110, 0f7FFFFFFF, %f12, %p15;

BB0_7:
	add.f32 	%f103, %f1, %f7;
	mov.b32 	 %r18, %f103;
	setp.lt.s32	%p16, %r18, 2139095040;
	setp.gtu.f32	%p17, %f7, 0f7F800000;
	setp.gtu.f32	%p18, %f1, 0f7F800000;
	or.pred  	%p19, %p18, %p17;
	or.pred  	%p20, %p16, %p19;
	add.f32 	%f104, %f21, 0f40000000;
	selp.f32	%f111, %f110, %f104, %p16;
	@%p20 bra 	BB0_9;

	setp.eq.f32	%p21, %f7, 0f7F800000;
	setp.neu.f32	%p22, %f1, 0f7F800000;
	or.pred  	%p23, %p21, %p22;
	setp.gt.f32	%p24, %f1, 0f3F800000;
	selp.f32	%f105, 0f7F800000, 0f00000000, %p24;
	setp.eq.f32	%p25, %f21, 0fBF800000;
	selp.f32	%f106, 0f3F800000, %f105, %p25;
	selp.f32	%f107, %f106, %f110, %p21;
	selp.f32	%f108, 0fFF800000, 0f7F800000, %p12;
	selp.f32	%f111, %f107, %f108, %p23;

BB0_9:
	add.s32 	%r19, %r19, 1;
	setp.lt.s32	%p28, %r19, %r3;
	@%p28 bra 	BB0_3;

	setp.eq.f32	%p29, %f21, 0f3F800000;
	selp.f32	%f112, 0f3F800000, %f111, %p29;

BB0_11:
	cvta.to.global.u64 	%rd2, %rd1;
	st.global.f32 	[%rd2], %f112;

BB0_12:
	ret;
}

	// .globl	_Z16intrinsic_kernelfPfi
.visible .entry _Z16intrinsic_kernelfPfi(
	.param .f32 _Z16intrinsic_kernelfPfi_param_0,
	.param .u64 _Z16intrinsic_kernelfPfi_param_1,
	.param .u32 _Z16intrinsic_kernelfPfi_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<3>;


	ld.param.f32 	%f3, [_Z16intrinsic_kernelfPfi_param_0];
	ld.param.u64 	%rd1, [_Z16intrinsic_kernelfPfi_param_1];
	ld.param.u32 	%r1, [_Z16intrinsic_kernelfPfi_param_2];
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.lo.s32 	%r4, %r2, %r3;
	mov.u32 	%r5, %tid.x;
	neg.s32 	%r6, %r5;
	setp.ne.s32	%p1, %r4, %r6;
	@%p1 bra 	BB1_4;

	setp.lt.s32	%p2, %r1, 1;
	@%p2 bra 	BB1_3;

	lg2.approx.f32 	%f5, %f3;
	add.f32 	%f6, %f5, %f5;
	ex2.approx.f32 	%f7, %f6;

BB1_3:
	cvta.to.global.u64 	%rd2, %rd1;
	st.global.f32 	[%rd2], %f7;

BB1_4:
	ret;
}


